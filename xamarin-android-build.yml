parameters:
  projectName: 'NOT_DEFINE'
  buildConfiguration: 'NOT_DEFINE'
  outputDirectory: 'NOT_DEFINE'
  keystoreFile: 'NOT_DEFINE'
  keystorePassword: 'NOT_DEFINE'
  keystoreAlias: 'NOT_DEFINE'
  keyPassword: 'NOT_DEFINE'
  netCoreVersion: 'NOT_DEFINE'
  nugetVersion: 'NOT_DEFINE'
  manifestPath: 'NOT_DEFINE'
  version: 'NOT_DEFINE'

jobs:
  - job: 
    displayName: 'Building ${{ parameters.projectName }}'
    steps:

      # Reference assemblies and build system requires .NET Core 3.0.x.
      - task: UseDotNet@2
        displayName: Use .Net Core sdk ${{ parameters.netCoreVersion }}
        inputs:
          packageType: 'sdk'
          version: '${{ parameters.netCoreVersion }}'
          
      # Use Bash to tell what version Xamarin and Mono to use when compiling app.
      - task: Bash@3
        displayName: Bash script copy Xamarin Android mono
        inputs:
          targetType: 'inline'
          script: |
            sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 6_4_0
      
      # Using Nuget version 5.3.1
      - task: NuGetToolInstaller@1
        displayName: 'Use Nuget ${{ parameters.nugetVersion }}'
        inputs:
          versionSpec: '${{ parameters.nugetVersion }}'
      
      # Download Mono 6.4.0 to build app with C# 8, iOS 13 and Android 10.
      - task: Boots@1
        displayName: Install Xamarin.Android Mono 6.4
        inputs:
          uri: 'https://download.mono-project.com/archive/6.4.0/macos-10-universal/MonoFramework-MDK-6.4.0.187.macos10.xamarin.universal.pkg'

      # Increment the version number and name of android build.
      - task: android-manifest-version@1
        displayName: Increment android version
        inputs:
          sourcePath: '{{ parameters.manifestPath }}'
          versionCodeOption: 'buildid'
          versionCode: '$(Build.BuildId)'
          versionName: '${{ parameters.version }}'
          printFile: true
      
      # Restore nuget packages.
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '**/*.sln'
          
      # Build Xamarin Android project.
      - task: XamarinAndroid@1
        displayName: 'Building android project'
        inputs:
          projectFile: '**/*.Android.csproj'
          outputDirectory: ${{ parameters.outputDirectory }}
          configuration: ${{ parameters.buildConfiguration }}
          
      # Singing and aligning APK files.
      - task: AndroidSigning@3
        displayName: 'Singing and Aligning APK files(s)'
        inputs:
          apkFiles: '${{ parameters.outputDirectory }}/*.apk'
          apksign: true
          apksignerKeystoreFile: ${{ parameters.keystoreFile }}
          apksignerKeystorePassword: ${{ parameters.keystorePassword }}
          apksignerKeystoreAlias: ${{ parameters.keystoreAlias }}
          apksignerKeyPassword: ${{ parameters.keyPassword }}
          apksignerArguments: --out ${{ parameters.outputDirectory }}/app.${{ parameters.projectName }}.release.apk
          zipalign: true
      
      # Publishing artifact from this stage.
      - task: PublishBuildArtifacts@1
        displayName: 'Publishing artifact'
        inputs:
          ArtifactName: build_${{ parameters.projectName }}
          PathtoPublish: ${{ parameters.outputDirectory }}